package dev.rokoblak.flowrspot.network

import com.jakewharton.retrofit2.adapter.kotlin.coroutines.experimental.CoroutineCallAdapterFactory
import com.squareup.moshi.Moshi
import dev.rokoblak.flowrspot.data.FlowersResponse
import dev.rokoblak.flowrspot.home.FlowersDataSource
import kotlinx.coroutines.experimental.Deferred
import okhttp3.Interceptor
import okhttp3.OkHttpClient
import retrofit2.Retrofit
import retrofit2.converter.moshi.MoshiConverterFactory
import java.util.concurrent.TimeUnit


interface DataProvider {

    /**
     * The API service's base URL
     */
    fun provideBaseUrl(): String

    /**
     * The Moshi instance
     */
    fun provideMoshi(): Moshi = Moshi.Builder().build()

    /**
     * An interceptor that can be set to the OkHttpClient, used by tests to provide fake data,
     * null by default
     */
    fun provideOKHttpInterceptor(): Interceptor? = null

    /**
     * The OKHttpClient instance
     */
    fun provideOkHttpClient(): OkHttpClient {
        return OkHttpClient.Builder().apply {
            connectTimeout(7000, TimeUnit.MILLISECONDS)
            provideOKHttpInterceptor()?.let {
                addInterceptor(it)
            }
            hostnameVerifier { hostname, session ->
                true
            }
        }.build()
    }

    /**
     * The Retrofit instance
     */
    fun provideRetrofit(): Retrofit {
        return Retrofit.Builder()
                .baseUrl(provideBaseUrl())
                .client(provideOkHttpClient())
                .addConverterFactory(MoshiConverterFactory.create(provideMoshi()))
                .addCallAdapterFactory(CoroutineCallAdapterFactory())
                .build()
    }

    /**
     * The API service generated by Retrofit
     */
    fun provideTrackerService(): FlowersAPIService {
        return provideRetrofit().create<FlowersAPIService>(FlowersAPIService::class.java)
    }

    /**
     * The default wrapper which just delegates the call to the API service
     * The pages start with 1 by default
     */
    fun provideServiceWrapper(): FlowersServiceWrapper {
        val service = provideTrackerService()
        return object : FlowersServiceWrapper {

            private val startPageIdx = 1

            override fun getFlowers(filterParam: String, pageIdx: Int, count: Int): Deferred<FlowersResponse> {
                return service.getFlowers(filterParam, pageIdx + startPageIdx)
            }
        }
    }

    /**
     * The repository from which the data source fetches the paged data
     */
    fun provideRepository(): FlowersRepository = FlowersRepository(provideServiceWrapper())

    /**
     * The data source used for pagination
     */
    fun provideDataSource(): FlowersDataSource = FlowersDataSource(provideRepository())
}